# -*- coding: utf-8 -*-
"""data_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ea-W7XoGOunPBqmf4jl4Z2Yxl5HYfmo

# **Exploratory Data Analysis**

## **Import libraries**
"""

# import numpy
import numpy as np

# import pandas
import pandas as pd

# import matplotlib
import matplotlib.pyplot as plt
from matplotlib.pyplot import imshow

# import zipfile for unzipping the data
import zipfile

# import csv to access the csv files
import csv

# import drive to access the data from GDrive
from google.colab import drive

# import seaborn
import seaborn as sns

import os

"""## **Mount Google Drive**"""

drive.mount('/content/drive/', force_remount=True)

"""## **Load CSV file**"""

driver_details = pd.read_csv('/content/drive/My Drive/Dataset/driver_imgs_list.csv', na_values='na')

driver_details.head(5)

"""## **Display Statistics**

#### **Display the number of images associated with each subject (driver id)**
"""

driver_count = driver_details['subject'].value_counts()

driver_count

"""## **Visualize the statistics for subjects in dataset**"""

driver_count = driver_details['subject'].value_counts().plot(kind = 'bar',
                                                            figsize=(20,12), title = "Number of images per subject")
driver_count.set_xlabel("Driver ID")
driver_count.set_ylabel("Count")

"""## **Split the subjects for training and validation**"""

# Choosing driver id for training data
training_drivers = driver_details[['subject','classname','img']][driver_details['subject'].isin(['p015', 'p050', 'p056', 'p022'])==False]

pd.DataFrame(training_drivers, columns=['subject','classname','img'])

"""## **Displaying the statistics for subjects in training data**

### **Visualize the statistics for subjects in training data**
"""

training_drivers = training_drivers['subject'].value_counts().plot(kind = 'bar',
                                                            figsize=(20,12), title = "Number of images per subject", color='orange')
training_drivers.set_xlabel("Training Driver ID")
training_drivers.set_ylabel("Count")

validation_drivers = driver_details[['subject','classname','img']][driver_details['subject'].isin(['p015', 'p050', 'p056', 'p022'])==True]

pd.DataFrame(validation_drivers, columns=['subject','classname','img'])

"""## **Displaying the statistics for subjects in training data**

### **Visualize the statistics for subjects in validation data**
"""

validation_drivers = validation_drivers['subject'].value_counts().plot(kind = 'bar',
                                                            figsize=(12,8), title = "Number of images per subject", color='red')
validation_drivers.set_xlabel("Validation Driver ID")
validation_drivers.set_ylabel("Count")

"""## **Loading the dataset**"""

training_dir = '/content/drive/My Drive/Dataset/train'
validation_dir = '/content/drive/My Drive/Dataset/validation'

"""### **Identifying the number of images in training and validation data**"""

training_images = sum(len(files) for _, _, files in os.walk(training_dir))
validation_images = sum(len(files) for _, _, files in os.walk(validation_dir))

print("Number of Training images: " + str(training_images))
print("Number of Validation images: " + str(validation_images))

categories = [c for c in os.listdir(training_dir)]
num_class = len(categories)
train_categories = [len(os.listdir(training_dir + "/" + c)) for c in os.listdir(training_dir)]
val_categories = [len(os.listdir(validation_dir + "/" + c)) for c in os.listdir(validation_dir)]

print("Classes in dataset:", categories)
print("Number of classes:",num_class)
print("Number of images in each class for training data:", train_categories)
print("Number of images in each class for validation data:", val_categories)

"""## **Statistics of training data**"""

num_train_images = pd.DataFrame(list(zip(categories, train_categories)), columns =['class', 'count'])

print(num_train_images)

"""## **Statistics of validation data**"""

num_val_images = pd.DataFrame(list(zip(categories, val_categories)), columns =['class', 'count'])

print(num_val_images)

"""## **Visualizing the number of images after train-validation split**

### **Visualizing the statistics of all classes in training data**
"""

labels = categories
x = np.arange(len(labels))
width = 0.6

fig, ax = plt.subplots()
fig.set_size_inches(16, 10)

box1 = ax.bar(x, train_categories, width, label='Training')
    
ax.set_ylabel('Number of Images')
ax.set_xlabel('Categories')
ax.set_title('Statistics of Training Images')
#ax.set_facecolor('cyan')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend

def labelnumber(boxes):
  for box in boxes:
    height = box.get_height()
    ax.annotate('{}'.format(height),
                xy=(box.get_x() + box.get_width() / 2, height),
                xytext=(0,2),
                textcoords="offset points",
                ha='center', va='bottom')

plt.minorticks_on()
plt.ylim(0,2400)

labelnumber(box1)
plt.show()

"""### **Visualizing the statistics of all classes in validation data**"""

labels = categories
x = np.arange(len(labels))
width = 0.6

fig, ax = plt.subplots()
fig.set_size_inches(16, 10)

box2 = ax.bar(x, val_categories, width, label='Validation', color='green')
    
ax.set_ylabel('Number of Images')
ax.set_xlabel('Categories')
ax.set_title('Statistics of Validation Images')
#ax.set_facecolor('cyan')
ax.set_xticks(x)
ax.set_xticklabels(labels)
ax.legend


plt.minorticks_on()
plt.ylim(0,500)

labelnumber(box2)
plt.show()